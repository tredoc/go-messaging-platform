// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_SaveMessage_FullMethodName                   = "/message.MessageService/SaveMessage"
	MessageService_GetMessageStatusByMessageUUID_FullMethodName = "/message.MessageService/GetMessageStatusByMessageUUID"
	MessageService_GetMessageByUUID_FullMethodName              = "/message.MessageService/GetMessageByUUID"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error)
	GetMessageStatusByMessageUUID(ctx context.Context, in *GetMessageStatusByMessageUUIDRequest, opts ...grpc.CallOption) (*GetMessageStatusByMessageUUIDResponse, error)
	GetMessageByUUID(ctx context.Context, in *GetMessageByUUIDRequest, opts ...grpc.CallOption) (*GetMessageByUUIDResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error) {
	out := new(SaveMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_SaveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageStatusByMessageUUID(ctx context.Context, in *GetMessageStatusByMessageUUIDRequest, opts ...grpc.CallOption) (*GetMessageStatusByMessageUUIDResponse, error) {
	out := new(GetMessageStatusByMessageUUIDResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessageStatusByMessageUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageByUUID(ctx context.Context, in *GetMessageByUUIDRequest, opts ...grpc.CallOption) (*GetMessageByUUIDResponse, error) {
	out := new(GetMessageByUUIDResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessageByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations should embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error)
	GetMessageStatusByMessageUUID(context.Context, *GetMessageStatusByMessageUUIDRequest) (*GetMessageStatusByMessageUUIDResponse, error)
	GetMessageByUUID(context.Context, *GetMessageByUUIDRequest) (*GetMessageByUUIDResponse, error)
}

// UnimplementedMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageStatusByMessageUUID(context.Context, *GetMessageStatusByMessageUUIDRequest) (*GetMessageStatusByMessageUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageStatusByMessageUUID not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageByUUID(context.Context, *GetMessageByUUIDRequest) (*GetMessageByUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageByUUID not implemented")
}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SaveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SaveMessage(ctx, req.(*SaveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageStatusByMessageUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageStatusByMessageUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageStatusByMessageUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessageStatusByMessageUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageStatusByMessageUUID(ctx, req.(*GetMessageStatusByMessageUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessageByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageByUUID(ctx, req.(*GetMessageByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMessage",
			Handler:    _MessageService_SaveMessage_Handler,
		},
		{
			MethodName: "GetMessageStatusByMessageUUID",
			Handler:    _MessageService_GetMessageStatusByMessageUUID_Handler,
		},
		{
			MethodName: "GetMessageByUUID",
			Handler:    _MessageService_GetMessageByUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
